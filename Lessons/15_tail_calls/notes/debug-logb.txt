⤇ lldb ./output/print.run
(lldb) target create "./output/print.run"
Current executable set to './output/print.run' (i386).
(lldb) b our_code_starts_here
Breakpoint 1: where = print.run`our_code_starts_here, address = 0x00001e70
(lldb) r
Process 84001 launched: './output/print.run' (i386)
Process 84001 stopped
* thread #1: tid = 0xbe4b9, 0x00001e70 print.run`our_code_starts_here, queue =
* 'com.apple.main-thread', stop reason = breakpoint 1.1
    frame #0: 0x00001e70 print.run`our_code_starts_here
print.run`our_code_starts_here:
->  0x1e70 <+0>: push   ebp
    0x1e71 <+1>: mov    ebp, esp
    0x1e73 <+3>: sub    esp, 0xfffffffc
    0x1e79 <+9>: mov    eax, 0xa
(lldb) register read ebp esp
     ebp = 0xbffffaa8
     esp = 0xbffffa7c
(lldb) memory read -f x -c 8 $esp
0xbffffa7c: 0x00001e54 0x8fe01094 0x00000000 0x00000000
0xbffffa8c: 0xbffffad8 0x00000001 0x00000000 0x0000000f
(lldb) memory read -f i -c 10 0x1e54
    0x1e54: 89 44 24 08     movl   %eax, 0x8(%esp)
    0x1e58: 8b 44 24 08     movl   0x8(%esp), %eax
    0x1e5c: 89 04 24        movl   %eax, (%esp)
    0x1e5f: e8 ac fd ff ff  calll  0x1c10                    ; print at
main.c:8
    0x1e64: 31 c9           xorl   %ecx, %ecx
    0x1e66: 89 44 24 04     movl   %eax, 0x4(%esp)
    0x1e6a: 89 c8           movl   %ecx, %eax
    0x1e6c: 89 ec           movl   %ebp, %esp
    0x1e6e: 5d              popl   %ebp
    0x1e6f: c3              retl
(lldb) memory read -f i -c 10 0x1e50
    0x1e50: 1c 00           sbbb   $0x0, %al
    0x1e52: 00 00           addb   %al, (%eax)
    0x1e54: 89 44 24 08     movl   %eax, 0x8(%esp)
    0x1e58: 8b 44 24 08     movl   0x8(%esp), %eax
    0x1e5c: 89 04 24        movl   %eax, (%esp)
    0x1e5f: e8 ac fd ff ff  calll  0x1c10                    ; print at
main.c:8
    0x1e64: 31 c9           xorl   %ecx, %ecx
    0x1e66: 89 44 24 04     movl   %eax, 0x4(%esp)
    0x1e6a: 89 c8           movl   %ecx, %eax
    0x1e6c: 89 ec           movl   %ebp, %esp
(lldb) memory read -f i -c 10 0x1e42
    0x1e42: 14 00              adcb   $0x0, %al
    0x1e44: 00 00              addb   %al, (%eax)
    0x1e46: 00 89 4c 24 10 89  addb   %cl, -0x76efdbb4(%ecx)
    0x1e4c: 44                 incl   %esp
    0x1e4d: 24 0c              andb   $0xc, %al
    0x1e4f: e8 1c 00 00 00     calll  0x1e70                    ;
our_code_starts_here
    0x1e54: 89 44 24 08        movl   %eax, 0x8(%esp)
    0x1e58: 8b 44 24 08        movl   0x8(%esp), %eax
    0x1e5c: 89 04 24           movl   %eax, (%esp)
    0x1e5f: e8 ac fd ff ff     calll  0x1c10                    ; print at
main.c:8
(lldb) f
frame #0: 0x00001e70 print.run`our_code_starts_here
print.run`our_code_starts_here:
->  0x1e70 <+0>: push   ebp
    0x1e71 <+1>: mov    ebp, esp
    0x1e73 <+3>: sub    esp, 0xfffffffc
    0x1e79 <+9>: mov    eax, 0xa
(lldb) register read ebp esp
     ebp = 0xbffffaa8
     esp = 0xbffffa7c
(lldb) si
Process 84001 stopped
* thread #1: tid = 0xbe4b9, 0x00001e71 print.run`our_code_starts_here + 1,
* queue = 'com.apple.main-thread', stop reason = instruction step into
    frame #0: 0x00001e71 print.run`our_code_starts_here + 1
print.run`our_code_starts_here:
->  0x1e71 <+1>:  mov    ebp, esp
    0x1e73 <+3>:  sub    esp, 0xfffffffc
    0x1e79 <+9>:  mov    eax, 0xa
    0x1e7e <+14>: push   eax
(lldb) register read ebp esp
     ebp = 0xbffffaa8
     esp = 0xbffffa78
(lldb) memory read -f x -c 4 $esp
0xbffffa78: 0xbffffaa8 0x00001e54 0x8fe01094 0x00000000
(lldb) si
Process 84001 stopped
* thread #1: tid = 0xbe4b9, 0x00001e73 print.run`our_code_starts_here + 3,
* queue = 'com.apple.main-thread', stop reason = instruction step into
    frame #0: 0x00001e73 print.run`our_code_starts_here + 3
print.run`our_code_starts_here:
->  0x1e73 <+3>:  sub    esp, 0xfffffffc
    0x1e79 <+9>:  mov    eax, 0xa
    0x1e7e <+14>: push   eax
    0x1e7f <+15>: call   0x1c10                    ; print at main.c:8
(lldb) register read ebp esp
     ebp = 0xbffffa78
     esp = 0xbffffa78
(lldb) si
Process 84001 stopped
* thread #1: tid = 0xbe4b9, 0x00001e79 print.run`our_code_starts_here + 9,
* queue = 'com.apple.main-thread', stop reason = instruction step into
    frame #0: 0x00001e79 print.run`our_code_starts_here + 9
print.run`our_code_starts_here:
->  0x1e79 <+9>:  mov    eax, 0xa
    0x1e7e <+14>: push   eax
    0x1e7f <+15>: call   0x1c10                    ; print at main.c:8
    0x1e84 <+20>: pop    eax
(lldb) register read ebp esp
     ebp = 0xbffffa78
     esp = 0xbffffa7c
(lldb) ^D
~/s/c/inlab6 (master|…4)
⤇ make test
make: `test' is up to date.
~/s/c/inlab6 (master|…4)
⤇ make output/print.run
nasm -f macho -o output/print.o output/print.s
clang -mstackrealign -g -m32 -o output/print.run main.c output/print.o
rm output/print.o
~/s/c/inlab6 (master|…4)
⤇ lldb ./output/print.run
(lldb) target create "./output/print.run"
Current executable set to './output/print.run' (i386).
(lldb) b our_code_starts_here
Breakpoint 1: where = print.run`our_code_starts_here, address = 0x00001e70
(lldb) r
Process 84114 launched: './output/print.run' (i386)
Process 84114 stopped
* thread #1: tid = 0xbf71d, 0x00001e70 print.run`our_code_starts_here, queue =
* 'com.apple.main-thread', stop reason = breakpoint 1.1
    frame #0: 0x00001e70 print.run`our_code_starts_here
print.run`our_code_starts_here:
->  0x1e70 <+0>: push   ebp
    0x1e71 <+1>: mov    ebp, esp
    0x1e73 <+3>: add    esp, 0xfffffffc
    0x1e79 <+9>: mov    eax, 0xa
(lldb) memory read -c 10 -f i $eip
->  0x1e70: 55                 pushl  %ebp
    0x1e71: 89 e5              movl   %esp, %ebp
    0x1e73: 81 c4 fc ff ff ff  addl   $0xfffffffc, %esp
    0x1e79: b8 0a 00 00 00     movl   $0xa, %eax
    0x1e7e: 50                 pushl  %eax
    0x1e7f: e8 8c fd ff ff     calll  0x1c10                    ; print at
main.c:8
    0x1e84: 58                 popl   %eax
    0x1e85: 89 45 fc           movl   %eax, -0x4(%ebp)
    0x1e88: 8b 45 fc           movl   -0x4(%ebp), %eax
    0x1e8b: 89 ec              movl   %ebp, %esp
(lldb) b 0x1e85
Breakpoint 2: where = print.run`our_code_starts_here + 21, address =
0x00001e85
(lldb) c
Process 84114 resuming
5
Process 84114 stopped
* thread #1: tid = 0xbf71d, 0x00001e85 print.run`our_code_starts_here + 21,
* queue = 'com.apple.main-thread', stop reason = breakpoint 2.1
    frame #0: 0x00001e85 print.run`our_code_starts_here + 21
print.run`our_code_starts_here:
->  0x1e85 <+21>: mov    dword ptr [ebp - 0x4], eax
    0x1e88 <+24>: mov    eax, dword ptr [ebp - 0x4]
    0x1e8b <+27>: mov    esp, ebp
    0x1e8d <+29>: pop    ebp
(lldb) register read $eip
     eip = 0x00001e85  print.run`our_code_starts_here + 21
(lldb) register read
General Purpose Registers:
       eax = 0x0000000a
       ebx = 0xbffffb48
       ecx = 0xbffff9a0
       edx = 0x00012868
       edi = 0x00000000
       esi = 0x00000000
       ebp = 0xbffffa78
       esp = 0xbffffa74
        ss = 0x00000023
    eflags = 0x00000282
       eip = 0x00001e85  print.run`our_code_starts_here + 21
        cs = 0x0000001b
        ds = 0x00000023
        es = 0x00000023
        fs = 0x00000000
        gs = 0x0000000f

(lldb) register read -f d eax
     eax = 10
(lldb)
